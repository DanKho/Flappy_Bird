# flappyBird_v1.py
# Creator - Danila Khomenko

# ===================  IMPORTS  ===================+
import tkinter as tk
import tkinter.ttk as ttk
import random

# ==================  CLASS CODE  ==================+


class Bird:
    """
    Represents the Bird on the main screen
    """

    PLAYER_IMAGE_FILE = "sprites/bird.png"
    GRAVITY_Y_SPEED = 3
    JUMP_Y_SPEED = -5

    def __init__(self, root, canvas, window_width, window_height):
        """
        Constructor for the player object
        :param canvas: canvas object
        :param window_width: width of the root window
        :param window_height: height of the root window
        """
        self.root = root
        self.canvas = canvas
        self.window_width = window_width
        self.window_height = window_height

        self.player_sprite = tk.PhotoImage(file=self.PLAYER_IMAGE_FILE)
        self.player = self.canvas.create_image(self.window_width/2, self.window_height/2, image=self.player_sprite,
                                               anchor="c", tag="player")
        self.y_speed = self.GRAVITY_Y_SPEED

    def get_y_speed(self):
        """
        Get y_speed of the player
        """
        return self.y_speed

    def get_player_coords(self):
        """
        Get x and y coordinates of the player
        """
        return self.canvas.coords(self.player)

    def player_fall(self):
        """
        Make the player fall downward
        """
        self.canvas.move(self.player, 0, self.y_speed)
        if self.get_player_coords()[1] < self.window_height-15:
            self.root.after(15, self.player_fall)
            self.y_speed += 0.25

    def player_jump(self):
        """
        Make the player jump upward
        """
        self.y_speed = self.JUMP_Y_SPEED

class Pipe:
    """
    Represents the Pipes generated by the game
    """
    WIDTH = 75
    MAX_X_SPEED = 2

    def __init__(self, root, canvas, window_width, window_height):
        """
        :param root:
        :param canvas:
        :param window_width:
        :param window_height:
        """
        self.root = root
        self.canvas = canvas
        self.window_width = window_width
        self.window_height = window_height

        self.pipe = None
        self.x = 500
        self.y = 100

        self.x_speed = self.MAX_X_SPEED

    def draw_pipe(self):
        self.pipe = self.canvas.create_rectangle(self.x, 200, self.x+self.WIDTH, self.window_height,
                                                  fill="green", tag="pipe")

    def move_pipe(self):
        """
        Make the pipe move sideways
        """
        self.canvas.move(self.pipe, self.x_speed, 0)
        if self.canvas.coords("pipe")[0] > self.window_width:
            print("Hi")
            self.root.after(15, self.move_pipe())
            self.y_speed += 0.25


class MainApplication:
    """
    A class containing that constructs the game window
    and handles the application logic
    """
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("FlappyBird_v1")

        self.width = 485
        self.height = 640
        self.background_color = "#03adfc"

        self.canvas = tk.Canvas(self.root, width=self.width, height=self.height, background=self.background_color)
        self.canvas.grid(row=0, column=0)

        self.player = Bird(self.root, self.canvas, self.width, self.height)
        self.canvas.bind("<KeyPress>", self.key_pressed)
        self.canvas.focus_set()

        self.pipe = Pipe(self.root, self.canvas, self.width, self.height)
        self.pipe.draw_pipe()

        self.root.eval('tk::PlaceWindow . center')
        #self.root.resizable(False, False)
        self.root.mainloop()

    def key_pressed(self, event):
        """
        Do something when the user presses a key (keyboard event handler)
        """
        key = event.keysym
        if key in ["s", "S"]:
            self.main()

        if key == "space":
            self.player.player_jump()

    def main(self):
        """
        Main flow of the program
        """
        self.player.player_fall()
        self.pipe.move_pipe()



MainApplication()
#